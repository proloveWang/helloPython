# 格式化输出
myName = "张三"
age = 19
print("我的名字是%s,我今年%d岁了"%(myName,age))
print("我明年%d岁"%(age+1))

# 为了方便在代码中进行字符串操作python提供了 --》 字符串格式化操作
# 格式化方式一： 占位符
# 常用的占位符有 %s %d %f 分别代表了 字符串、整数、小数，上面的案例就可以修改
print("age变量中存储数据是%d"%age)
# 多变量语句拼接
print("欢迎来到%s来学习数据仓库课程，你的学号是YH%d"%("云和教育",10010))
# 数据精准控制操作
print("欢迎来到%s来学习数据仓库课程，你的学号是YH%d，本次你的考试成绩是%f"%("云和教育",10010,98.43))
# 可以发现在输入小数数据98.43时输出的结果时98.430000
"""
我们可以使用辅助符号"m.n"来控制数据的宽度和精度
m，控制宽度，要求是数字（很少使用）,设置的宽度小于数字自身，不生效
.n，控制小数点精度，要求是数字，会进行小数的四舍五入
示例：
%3d：表示将整数的宽度控制在3位，如数字11，被设置为3d，就会变成：[空格]11，用1个空格补足宽度。
print("你的学号是%03d"%1)
%8.2f：表示将宽度控制为8，将小数点精度设置为2
      小数点和小数部分也算入宽度计算。如，对3.1415设置了%8.2f 后，结果是：[空格][空格]3.1415。2个空格补足宽度，小数部分限制2位精度后，四舍五入为 .14
%.2f：表示不限制宽度，只设置小数点精度为2，如3.1415设置%.2f后，结果是3.14
"""
print("欢迎来到%s来学习数据仓库课程，你的学号是YH%d，本次你的考试成绩是%.2f"%("云和教育",10010,98.43))
#如果m比数字本身宽度小，m是不会生效的 .n会对小数部分进行四舍五入操作

# 格式化方式二： f字符串(快速格式化)
eduName = "云和教育"
stuNo = 10010
stuScore = 98.43
print(f"欢迎来到{eduName}来学习数据仓库课程，你的学号是QF{stuNo}，本次你的考试成绩是{stuScore}")

# 格式化方式三：表达格式化
# 对于那些不使用变量进行存储的表达式，只是提供计算并输出结果可以使用这样的方式完成
print("1+1等于%d"%(1+1))
print(f"1+1等于{1+1}")
#上述格式化字符串的方式可以应用在定义字符串变量时使用