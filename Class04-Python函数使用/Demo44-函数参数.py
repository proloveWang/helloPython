#
# 函数参数使用方式上的不同可以得到不同参数参数种类，函数有4种常见参数使用方式位置参数、关键字参数、缺省参数、不定长参数


# 关键字参数
# 关键字参数：函数调用时通过“键=值”形式传递参数。即使赋值的顺序与定义顺序不一致，也会根据变量名定位到对应的形参，给形参赋值即可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求
# 注意:函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序
def show3(x,y,z):
    print(f"{x}、{y}、{z}")
# 关键字参数指的是在对位置参数赋值的时候进行操作
# 正常赋值
show3(1,2,3)
#关键字参数赋值(不用满足按照顺序赋值的方式，但是参数名一定要提供并使用，`变量名=值`)
show3(z=1,x=4,y=20)
#混合赋值(关键字参数必须在位置参数传值之后)
show3(10,z=30,y=40)

#-------------------
print("-------------------")
#-------------------

# 缺省参数
# 缺省参数：缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）
# 注意:函数调用时，如果为缺省参数传值则修改默认参数值, 否则使用这个默认值

#比如:系统中的print函数  --》 def print(self, *args, sep=' ', end='\n', file=None) --》 end就是默认参数
def show2(x,y=10):
    res = x+y
    print(f"{x}+{y}的和是：{res}")
# 默认参数不赋值会使用定义时的默认值
show2(1)
# 也可以对默认参数进行赋值操作
show2(1,2)

#-------------------
print("-------------------")
#-------------------

# 不定长参数
# 不定长参数：不定长参数也叫可变参数. 用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。当调用函数时不确定参数个数时, 可以使用不定长参数。
# 不定长参数的类型:位置传递、关键字传递

# 传进的所有参数除了1之外都会被y变量收集，它会根据传进参数的位置合并为一个元组(tuple)，y是元组类型，这就是位置传递
# 【*变量名】的方式就是可变参数
def show7(x,*y):
	# y是可变参数（元组）可以在使用for循环来完成
	print(f"{x},{y}")
# 这里除了1之外 都是赋值给可变参数y的值
show7(1,2,3,4,5,6,7)

# 不定长参数
def show1(a,b,c,*d):
    print(a,b,c)
    # d 在此处是一个元组
    print(d)
    return a+","+b+","+c+","+(",".join(d))

print(show1("1","2","3","4","5","6"))

#-------------------
print("-------------------")
#-------------------

# 关键字传递
# 对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过kwargs检查。
# 注意:参数是“键=值”形式的形式的情况下, 所有的“键=值”都会被kwargs接受, 同时会根据“键=值”组成字典
# 希望检查是否有city和job的参数
def show4(name,age,**kwargs):
    if "city" in kwargs: #检查kwargs是否是需要的关键字参数
        print(f"{name},{age},{kwargs}")
        return
    if "job" in kwargs:
        print(f"{name}、{age}、{kwargs}")
        return
    print(f"{name}:{age}:{kwargs}")

show4("zhangsan",18,city1="北京",job1="程序员")

# 命名关键字参数：如果要限制关键字参数的名字，就可以用命名关键字参数，和关键字参数kwargs不同,命名关键字参数需要一个特殊分隔符 *，*后面的参数被视为命名关键字参数
# 只接收city和job作为关键字参数
def show5(name, age, *, city, job):
	print(name,age,city,job)
show5("李四","20",city="北京",job="BI工程师")

# PS：命名参数在定义时可以通过设置默认值从而简化调用
def show6(name, age, *, city="杭州", job):
	print(name,age,city,job)
#因为city有默认,所以调用的时候可以不传
show6("李四","20",job="数据清洗工程师")

# 需要注意：如果存在关键字参数必须在可变参数的后面
def show8(x,*y,**z):
   # y是可变参数可以在使用for循环来完成
   print(f"{x},{y},{z}")
show8(1,2,3,4,5,6,j=1,i=2)

# 需要注意：命名关键字参数不能和可变参数共存
# def show9(x,*y,*,z,a):
#     print(f"{x},{y},{z},{a}")
# show9(1,2,3,4,5,6,z=1,a=2)
# # 报错：
# #   File "D:\BD2025_01\pyworkspace\pythonProject\day03\_01函数.py", line 78
# #     def show9(x,*y,*,z,a):
# #                    ^
# # SyntaxError: invalid syntax









