
# 之前学习函数中提供的形参的定义，可以接收数据传入到函数中进行使用，其实学习函数的本身，也可以作为参数传入另一个函数内

# 函数的参数是可以传递一个函数名的
def jisuan(a,b,fun):
    print(type(fun)) # <class 'function'>
    sum = fun(a,b)
    return sum

def add(a,b):
    return a+b

def sub(a,b):
    return a-b


print(jisuan(3,4,add))
print(jisuan(3,4,sub))
"""
函数add，作为参数，传入了test_func函数中使用。
test_func需要一个函数作为参数传入，这个函数需要接收2个数字进行计算，计算逻辑由这个被传入函数决定
add函数接收2个数字对其进行计算，add函数作为参数，传递给了test_func函数使用
最终，在test_func函数内部，由传入的add函数，完成了对数字的计算操作
所以，这是一种，【计算逻辑的传递，而非数据的传递】。就像上述代码那样，【不仅仅是相加，相见、相除、等任何逻辑都可以自行定义并作为函数传入】。
"""
'''
● 函数本身是可以作为参数，传入另一个函数中进行使用的。
● 将函数传入的作用在于：传入计算逻辑，而非传入数据。
'''
#-------------------
print("-------------------")
#-------------------
#-------------------
print("-------------------")
#-------------------
# lambda匿名函数
# lambda匿名函数：又称为匿名函数，一般就是应用在作为一个参数传递到另外一个函数中也可以理解成对功能简单的函数的简化。
# 函数的定义中:
# ● def关键字，可以定义带有名称的函数,有名称的函数，可以基于名称重复使用。
# ● lambda关键字，可以定义匿名函数（无名称）无名称的匿名函数，只可临时使用一次。
# 匿名函数定义语法：
# lambda 传入参数:函数体(一行代码)
# ● lambda 是关键字，表示定义匿名函数
# ● 传入参数表示匿名函数的形式参数，如：x, y 表示接收2个形式参数
# ● 函数体，就是函数的执行逻辑，要注意：只能写一行，无法写多行代码
def test_func(add):
    res = add(1,2)
    print(f"计算结果为：{res}")
# 使用def和使用lambda，定义的函数功能完全一致，只是lambda关键字定义的函数是匿名的，无法二次使用
test_func(lambda x,y:x+y)
# ● 匿名函数用于临时构建一个函数，只用一次的场景
# ● 匿名函数的定义中，函数体只能写一行代码，如果函数体要写多行代码，不可用lambda匿名函数，应使用def定义带名函数
# 函数的参数是可以传递一个函数名的
def jisuan(a,b,fun):
    print(type(fun)) # <class 'function'>
    sum = fun(a,b)
    return sum

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

# lambda 表达式是适用于方法题中只有一句话的情况，如果有多句代码，不适用
def div(a,b):
    if b !=0:
        return a/b


print(jisuan(3,4,add))
print(jisuan(3,4,sub))
# 以上都是先将函数写出来，然后调用，也可以不写使用匿名函数
print(jisuan(3,4,lambda x,y: x*y))
print(jisuan(3,4,lambda x,y: x/y))

# print(jisuan(3,4,lambda x,y: if y!=0 return x/y))

#-------------------
print("-------------------")
#-------------------
#-------------------
print("-------------------")
#-------------------



















