# Python中的数据容器：一种可以容纳多份数据的数据类型，容纳的每一份数据称之为1个元素，每一个元素，可以是任意类型的数据，如字符串、数字、布尔等。
# 数据容器根据特点的不同如：是否支持重复元素、是否可以修改、是否有序等数据容器分为5类分别是：
# 字符串（str）、列表（list）、元组（tuple）、集合（set）、字典（dict）

name_list = ["张三","李四","王五","赵六","田七"]
#一个变量记录五份数据，这就是数据容器，一个容器可以容纳多份数据，提供对数据存储和操作方式


# 成员运算符
# 针对于容器型数据的，判断一个数据是否为容器中的内部元素
# in	数据 in 容器型数据 把数据当做一个整体 检查是否在容器型数据中
# not in	数据 not in 容器型数据 把数据当做一个整体 检查是否不在容器型数据中


# 身份运算符
# 身份运算符用于比较两个对象的内存地址是否一致,是否是对同一对象的引用
# id	id(数据) 可以获取数据的地址
# is	数据 is 数据 判断两个数据的地址是否一致
# not is	not 数据 is 数据 判断两个数据的地址是否不一致
# 需要注意：is用于判断两个变量引用对象是否为同一个，而==用于判断引用变量的值是否相等


# 字符串str
# 字符串是字符的容器：一个字符串可以存放任意数量的字符(包含零个或者多个字符的有序不可变序列)。
# 需要注意：
# ● 不可变：内容一旦确定，就不允许发生变化
# ● 有序： 添加顺序和显式顺序一致，元素在添加的时候会为元素设置编号，这个编号是从0开始的【这个编号称为索引、下标、脚标】
# ● 序列是指：内容连续、有序，可使用下标索引的一类数据容器。列表、元组、字符串，均可以可以视为序列。

# 字符串的定义
# 有两种方式来进行定义：
# 1. 使用引号包含格式的字面量定义法
# 2. 使用str()进行构造

# 空字字符串
str0 = ''
str0_0 = str()
# 创建字符串
str1 = "我是字符串"
str2 = str("我是字符串")
#str() 不仅可以创建字符串，而且可以将赋值参数转换为字符串类型
str3 = str(10) # "10"
str4 = str([1,2,3,4]) #"[1,2,3,4]"

# 字符串的分类：
# 1. 转义字符串：因为在编程语言中有\,是转义符，会将一些特殊的符号转义成其他的含义
# 2. 原生字符串：保持每个字符原本的含义，就是原生字符串对比一下：\n 在转义字符串中是 一个换行符， 原生字符串解读，应该是两个符号反斜杠和n将转义字符串转化成原生字符串的方式：
#   a. 使用\进行再次转义
# 3. 使用r或者R修饰字符串
# n ----> \n  换行符
# t ----> \t  水平制表符
# r ----> \r  回车符  【windows系统的字节模式下  换行符是两个符号组成的  \r\n】
# f ----> \f  换页符
# v ----> \v  纵向制表符
# u ----> \u  unicode码的前缀   '\u4e00'
# x ----> \x  字节模式下 十六进制的前缀
s = 'C:\\Users\\jkMaster\\Documents\\test.txt'
print(s)
ss = r'C:\Users\jkMaster\Documents\test.txt'
print(ss)
# 这两字符串变量打印结果时一样，但是不同点在于，当遇到python中的转移字符串时，如何将转移字符串转变会原有含义的操作即原生字符串的操作












